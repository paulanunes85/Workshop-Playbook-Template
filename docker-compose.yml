version: '3.8'

services:
  # Aplicação principal
  workshop-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: workshop-template
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - LOG_LEVEL=info
      # Adicione outras variáveis de ambiente necessárias
    volumes:
      # Volume para logs persistentes
      - ./logs:/app/logs
      # Volume para dados (se necessário)
      - ./data:/app/data
      # Volume para desenvolvimento (hot reload)
      - .:/app
      - /app/node_modules
    depends_on:
      - redis
      - postgres
    networks:
      - workshop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: workshop-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - workshop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL para dados (opcional)
  postgres:
    image: postgres:15-alpine
    container_name: workshop-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=workshop
      - POSTGRES_USER=workshop
      - POSTGRES_PASSWORD=workshop123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./resources/sql:/docker-entrypoint-initdb.d
    networks:
      - workshop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U workshop"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx para proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: workshop-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    depends_on:
      - workshop-app
    networks:
      - workshop-network
    restart: unless-stopped
    profiles:
      - production

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: workshop-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - workshop-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana para dashboards (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: workshop-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - workshop-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  workshop-network:
    driver: bridge
    name: workshop-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Profiles para diferentes ambientes
# Desenvolvimento: docker-compose up
# Produção: docker-compose --profile production up
# Monitoramento: docker-compose --profile monitoring up
